const { performDatabaseQuery } = require('mariadb');

// Mock the database library
jest.mock('mariadb', () => ({
  __esModule: true,
  Pool: jest.fn(() => ({
    connect: jest.fn(),
    query: jest.fn(),
    end: jest.fn(),
  })),
}));

describe('performDatabaseQuery', () => {
  it('should connect to the database, perform a query, and store the result', async () => {
    // Import the function after mocking the database library
    const { performDatabaseQuery } = require('index.js');
    
    // Mock the query result
    const mockQueryResult = {
      rows: [{ id: 1, name: 'Test User' }],
    };
    
    // Mock the query function to return the mockQueryResult
    const mockQuery = jest.fn().mockResolvedValue(mockQueryResult);
    
    // Mock the database connection
    const mockConnection = {
      query: mockQuery,
      release: jest.fn(),
    };
    
    // Mock the pool.connect function to return the mockConnection
    const mockPool = {
      connect: jest.fn().mockResolvedValue(mockConnection),
    };
    
    // Replace the real implementation with mocks
    const pg = require('mariadb');
    pg.Pool.mockImplementation(() => mockPool);

    // Call the function being tested
    const result = await performDatabaseQuery();

    // Assertions
    expect(pg.Pool).toHaveBeenCalledTimes(1);
    expect(mockPool.connect).toHaveBeenCalledTimes(1);
    expect(mockQuery).toHaveBeenCalledTimes(1);
    expect(result).toEqual(mockQueryResult.rows);
  });
});